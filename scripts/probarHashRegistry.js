const axios = require('axios');

// Ejemplo de noticia para probar
const noticiaEjemplo = {
  noticiaTexto: "Bolivia aprueba nueva ley educativa que moderniza el curr√≠culo escolar",
  resultadoVerificacion: {
    veredicto: "Posiblemente Verdadera",
    score: 85,
    razonamiento: "Basado en fuentes oficiales y entidades gubernamentales",
    metodo: "GROQ",
    tipo_input: "ESTRUCTURADA"
  }
};

// Funci√≥n para probar registro de hash
async function probarRegistroHash() {
  console.log('üß™ Probando registro de hash para integridad...\n');
  
  try {
    console.log('üìù Registrando hash de noticia:');
    console.log('Texto:', noticiaEjemplo.noticiaTexto);
    console.log('Score:', noticiaEjemplo.resultadoVerificacion.score);
    
    const response = await axios.post('http://localhost:3000/registrar-hash', noticiaEjemplo);
    
    console.log('‚úÖ Resultado del registro:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error registrando hash:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
    return null;
  }
}

// Funci√≥n para probar verificaci√≥n de integridad
async function probarVerificacionIntegridad(hash) {
  console.log('\nüîç Probando verificaci√≥n de integridad...\n');
  
  try {
    console.log(`üîó Verificando hash: ${hash}`);
    
    const response = await axios.get(`http://localhost:3000/verificar-integridad/${hash}`);
    
    console.log('‚úÖ Resultado de verificaci√≥n:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error verificando integridad:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
    return null;
  }
}

// Funci√≥n para probar verificaci√≥n por contenido
async function probarVerificacionPorContenido() {
  console.log('\nüîç Probando verificaci√≥n por contenido...\n');
  
  try {
    console.log('üìù Verificando integridad del contenido original:');
    console.log('Texto:', noticiaEjemplo.noticiaTexto);
    
    const response = await axios.post('http://localhost:3000/verificar-integridad-contenido', {
      noticiaTexto: noticiaEjemplo.noticiaTexto
    });
    
    console.log('‚úÖ Resultado de verificaci√≥n por contenido:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error verificando integridad por contenido:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
    return null;
  }
}

// Funci√≥n para probar verificaci√≥n de contenido modificado
async function probarContenidoModificado() {
  console.log('\nüîç Probando verificaci√≥n de contenido modificado...\n');
  
  try {
    const contenidoModificado = noticiaEjemplo.noticiaTexto + " (MODIFICADO)";
    console.log('üìù Verificando integridad del contenido modificado:');
    console.log('Texto:', contenidoModificado);
    
    const response = await axios.post('http://localhost:3000/verificar-integridad-contenido', {
      noticiaTexto: contenidoModificado
    });
    
    console.log('‚úÖ Resultado de verificaci√≥n de contenido modificado:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error verificando contenido modificado:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
    return null;
  }
}

// Funci√≥n para obtener estad√≠sticas
async function obtenerEstadisticas() {
  console.log('\nüìä Obteniendo estad√≠sticas del hash registry...\n');
  
  try {
    const response = await axios.get('http://localhost:3000/estadisticas-hash-registry');
    
    console.log('‚úÖ Estad√≠sticas del hash registry:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
    return null;
  }
}

// Funci√≥n para probar registro m√∫ltiple
async function probarRegistroMultiple() {
  console.log('\nüìù Probando registro m√∫ltiple de hashes...\n');
  
  try {
    const noticiasMultiples = [
      {
        texto: "Bolivia aprueba nueva ley educativa",
        resultado: {
          veredicto: "Posiblemente Verdadera",
          score: 85
        }
      },
      {
        texto: "El presidente anunci√≥ medidas econ√≥micas",
        resultado: {
          veredicto: "Posiblemente Verdadera",
          score: 78
        }
      },
      {
        texto: "Alien√≠genas visitan La Paz",
        resultado: {
          veredicto: "Posiblemente Falsa",
          score: 15
        }
      }
    ];
    
    console.log(`üìù Registrando ${noticiasMultiples.length} hashes...`);
    
    const response = await axios.post('http://localhost:3000/registrar-multiples-hashes', {
      noticias: noticiasMultiples
    });
    
    console.log('‚úÖ Resultado del registro m√∫ltiple:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
    
  } catch (error) {
    console.error('‚ùå Error en registro m√∫ltiple:', error.message);
    if (error.response) {
      console.error('Respuesta del servidor:', error.response.data);
    }
    return null;
  }
}

// Funci√≥n principal para ejecutar todas las pruebas
async function ejecutarPruebasCompletas() {
  console.log('üöÄ Iniciando pruebas del NewsHashRegistry...\n');
  
  // 1. Registrar hash
  const resultadoRegistro = await probarRegistroHash();
  if (!resultadoRegistro || !resultadoRegistro.success) {
    console.log('‚ùå Fall√≥ el registro de hash, abortando pruebas');
    return;
  }
  
  // 2. Verificar integridad por hash
  await probarVerificacionIntegridad(resultadoRegistro.contentHash);
  
  // 3. Verificar integridad por contenido
  await probarVerificacionPorContenido();
  
  // 4. Verificar contenido modificado
  await probarContenidoModificado();
  
  // 5. Obtener estad√≠sticas
  await obtenerEstadisticas();
  
  // 6. Probar registro m√∫ltiple
  await probarRegistroMultiple();
  
  console.log('\n‚úÖ Todas las pruebas completadas');
}

// Funci√≥n para probar solo verificaci√≥n
async function probarSoloVerificacion() {
  console.log('üîç Probando solo verificaci√≥n de integridad...\n');
  
  // Hash de ejemplo (deber√≠a existir si ya se registr√≥)
  const hashEjemplo = "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef";
  
  await probarVerificacionIntegridad(hashEjemplo);
  await probarVerificacionPorContenido();
  await probarContenidoModificado();
  await obtenerEstadisticas();
}

// Ejecutar si se llama directamente
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.includes('--solo-verificacion')) {
    probarSoloVerificacion().catch(console.error);
  } else {
    ejecutarPruebasCompletas().catch(console.error);
  }
}

module.exports = {
  probarRegistroHash,
  probarVerificacionIntegridad,
  probarVerificacionPorContenido,
  probarContenidoModificado,
  obtenerEstadisticas,
  probarRegistroMultiple,
  ejecutarPruebasCompletas,
  noticiaEjemplo
}; 